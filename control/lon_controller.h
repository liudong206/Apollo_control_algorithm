#ifndef LON_CONTROLLER_H
#define LON_CONTROLLER_H
#include <map>
#include <memory>
#include <string>
#include <vector>
#include <fstream>
#include "control.h"
#include "vehicle_info/vehicle_params.h"
#include "pid_controller.h"
#include "filters/digital_filter.h"
#include "filters/digital_filter_coefficients.h"
/**
 * @namespace control
 * @brief control
 */
namespace control {
class LonController : public Controller {
public:
  /**
   * @brief constructor
   */
  LonController();

  /**
   * @brief destructor
   */
  virtual ~LonController() override;

  /**
   * @brief initialize Longitudinal Controller
   * @param control_conf control configurations
   * @return true or false
   */
  bool Init(const ControlConf *control_conf);

  /**
   * @brief compute brake / throttle values based on current vehicle status
   *        and target trajectory
   * @param debug
   * @param vehicle status e.g., speed, acceleration
   * @param trajectory trajectory generated by planning
   * @return 0
   */
  int ComputeControlCommand(const std::vector<TrajectoryPoint>* planning_trajectory,
                            SimpleDebug *debug,
                            const VehicleState &vehicle_state) override;
  /**
   * @brief Stop longitudinal
   * @param
   * @return
   */
  void Stop();

protected:
  void ComputerLongitudinalErrors(const TrajectoryPoint &ref_point,
                                  SimpleDebug *debug,
                                  const VehicleState &vehicle_state);
  void ProcessLogs(const SimpleDebug *debug);

  void LoadControlCalibrationTable(const LonControllerConf &lon_controller_conf);

private:
  void SetDigitalFilterPitchAngle(const LonControllerConf &lon_controller_conf);

  void SetDigitalFilter(double ts, double cutoff_freq,
                          common::DigitalFilter *digital_filter);
  void CloseLogFile();

  std::string name_;

  bool controller_initialized_ = false;
  //pid speed controller
  PIDController speed_pid_controller_;
  //pid station controller
  PIDController station_pid_controller_;
  //pid conf init
  StationPidConf station_pid_conf_;

  HighSpeedPidConf high_speed_pid_conf_;

  LowSpeedPidConf low_speed_pid_conf_;
  //low pass digital filter
  common::DigitalFilter digital_filter_pitch_angle_;

  const ControlConf *control_conf_ = nullptr;

  // vehicle parameter
  VehicleParams vehicle_param_;
  //debug log flag
  bool FLAGS_enable_csv_debug = true;

  bool FLAGS_enable_slope_offset = false;
  // for logging purpose
  std::ofstream speed_log_file_;
  // for preview
  bool FLAGS_enable_speed_station_preview = false;
};
}//namespace control



#endif // LON_CONTROLLER_H
